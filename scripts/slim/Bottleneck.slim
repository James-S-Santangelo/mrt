// set up a simple neutral simulation
initialize() {

	initializeMutationRate(1e-8);
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	// uniform chromosome of length 100 Mb with uniform recombination
	// chosen as the size of the Chlamydamonas genome
	initializeGenomicElement(g1, 0, 1e8);
	initializeRecombinationRate(1e-8);

	// New population size following the bottleneck
	// "N" and "bottleneck" defined in SLiM_sims.py
	defineConstant("N_bot", N * bottleneck);
}

// create a population of N individuals
// create script block to perform action over simulation interval
1 {
	sim.addSubpop("p1", N);
	sim.rescheduleScriptBlock(s1, 1, (N * 10 + N) + N * 10);
}

// Use script block to perform actions based generation and population size
s1 late() {

	// Output every N generations
	if(sim.generation % N == 0){
//		print(sim.generation);

		// If population has at least 50 individuals
		if(p1.individualCount >= 50){
			print(p1.individualCount);
			//p1.genomes.outputVCF();
//			print("Writing " + "./slim_" + N + "_" + sim.generation + ".vcf");
      	p1.outputVCFSample(50, replace = F, outputMultiallelics = F, filePath="../../data/test_SLiM_output/slim_N" + N + "_" + "bot" + bottleneck + "_" + "gen" + sim.generation + ".vcf");

      }
      if(p1.individualCount < 50){
      	print(p1.individualCount);
			//p1.genomes.outputVCF();
//			print("Writing " + "./slim_" + N + "_" + sim.generation + ".vcf");
      	p1.outputVCFSample(p1.individualCount, replace = F, outputMultiallelics = F, filePath="../../data/test_SLiM_output/slim_N" + N + "_" + "bot" + bottleneck + "_" + "gen" + sim.generation + ".vcf");
      }

   }
   // Bottleneck after 10Ne generations
   if(sim.generation == N * 10) {
		p1.setSubpopulationSize( asInteger(N_bot) );
	}
	// Expand population N generations after bottleneck
	if(sim.generation == N * 10 + N) {
		p1.setSubpopulationSize( N );
	}
	// Sims are finished 10 Ne generations after population expansion
	if(sim.generation == (N*10 + N) + N*10) {
		sim.simulationFinished();
	}

}

